name: ci-staging

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:

  # ---------------
  # create-artifact
  # ---------------

  create-artifact:
    name: Create artifact
    environment: staging
    runs-on: ubuntu-latest
    steps:

      - name: Checkout üõé
        uses: actions/checkout@v3

      - name: Setup node env üèó
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: 'npm'

      - name: Output Node Version üõ†
        run: node -v

      - name: Output Github SHA üõ†
        run: echo ${{ github.sha }}

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies üë®üèª‚Äçüíª
        # run: npm install gsap --registry https://npm.greensock.com
        run: npm ci

      - name: Generate static site
        run: npm run generate
        # continue-on-error: true
        env:
          NODE_ENV: production
          BASE_URL: ${{ vars.BASE_URL }}
          ASSET_URL: ${{ vars.ASSET_URL }}
          STRAPI_URL: ${{ vars.STRAPI_URL }}
          STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}

      - name: Compress app-artifact
        run: |
          tar -czf "${GITHUB_SHA}".tar.gz .output/public

      - name: Store app-artifact for distribution
        uses: actions/upload-artifact@v3
        with:
          name: app-artifact
          path: ${{ github.sha }}.tar.gz

  # ---------------
  # prepare-release
  # ---------------

  prepare-release:
    name: "Prepare release"
    environment: staging
    runs-on: ubuntu-latest
    needs: create-artifact
    steps:

      - name: Checkout üõé
        uses: actions/download-artifact@v3
        with:
          name: app-artifact

      - name: Upload app-artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.HOST_IP }}
          port: "22"
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          source: ${{ github.sha }}.tar.gz
          target: /var/www/html/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ vars.HOST_IP }}
          port: "22"
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "/var/www/html/releases/${GITHUB_SHA}"
            tar xzf /var/www/html/artifacts/${GITHUB_SHA}.tar.gz -C "/var/www/html/releases/${GITHUB_SHA}"
            rm -rf /var/www/html/artifacts/${GITHUB_SHA}.tar.gz

  # ----------------
  # activate-release
  # ----------------

  activate-release:
    name: "Activate release"
    environment: staging
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:

      - name: Activate Release
        uses: appleboy/ssh-action@master
        env:
          RELEASE_PATH: /var/www/html/releases/${{ github.sha }}/.output/public
          ACTIVE_RELEASE_PATH: /var/www/html/live
        with:
          host: ${{ vars.HOST_IP }}
          port: "22"
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          envs: RELEASE_PATH,ACTIVE_RELEASE_PATH
          script: |
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH

  # --------
  # clean-up
  # --------

  clean-up:
    name: "Clean up old versions"
    environment: staging
    runs-on: ubuntu-latest
    needs: activate-release
    steps:

      - name: delete old releases on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.HOST_IP }}
          port: "22"
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          script: |
            cd /var/www/html/releases && ls -t -1 | tail -n +4 | xargs rm -rf
            cd /var/www/html/artifacts && rm -rf *

      - name: delete old artifact in github
        uses: geekyeggo/delete-artifact@v2
        with:
          name: app-artifact